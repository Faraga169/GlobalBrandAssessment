@model PagedResult<GetAllAndSearchManagerDTO>

@{
    ViewData["Title"] = "Employee List";
}

@if (!string.IsNullOrEmpty(TempData["Message"] as string))
{
    <!-- Toast Container -->
    <div aria-live="polite" aria-atomic="true" style="position: relative;">
        <div id="myToast" class="toast shadow-lg custom-toast" data-autohide="false" style="background-color: #f0f8ff; border: 1px solid #007bff;">
            <div class="toast-header" style="background-color: #007bff; color: white;">
                <strong class="mr-auto">🔔 Notification</strong>
                <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" style="color: white;">
                    <span>&times;</span>
                </button>
            </div>
            <div class="toast-body" style="color: #00008b; font-weight: bold;">
                @TempData["Message"]
            </div>
        </div>
    </div>
}

<div class="d-flex justify-content-center">
    <h2 class="text-secondary fs-3">Display Employees</h2>
</div>




@if (Model.Items.Count() > 0)
{
    <div class="d-flex justify-content-center mb-2">
        <a class="btn btn-outline-secondary bg-opacity-50" asp-action="Create"><i class="fa-solid fa-circle-plus mx-2"></i>Create New Employee</a>
    </div>


    <div class="input-group mb-2">
        <input type="search" class="form-control rounded-start-pill searchvalue" placeholder="Search by First Name, Last Name, or Department Name">
        <button type="submit" class="btn btn-outline-secondary rounded-end-pill" id="searchbtn">
            @Html.AntiForgeryToken()
            <i class="fa-solid fa-magnifying-glass"></i>
        </button>
    </div>

    <table class="table table-hover table-striped text-center table-dark rounded-2">
        <thead>
            <tr>
                <th>@Html.DisplayNameFor(x => x.Items.First().FirstName)</th>
                <th>@Html.DisplayNameFor(x => x.Items.First().LastName)</th>
                <th>@Html.DisplayNameFor(x => x.Items.First().Salary)</th>
                <th>@Html.DisplayNameFor(x => x.Items.First().Role)</th>
                <th>@Html.DisplayNameFor(x => x.Items.First().ImageURL)</th>
                <th>@Html.DisplayNameFor(x => x.Items.First().Department)</th>
                <th colspan="2">Actions</th>
            </tr>
        </thead>
        <tbody id="employeeTable">
            @await Html.PartialAsync("_IndexAdminPartial", Model.Items)
        </tbody>
    </table>




    <!-- Pagination Controls -->
    <nav class="d-flex justify-content-center mt-3">
        <ul class="pagination">
            @if (Model.PageNumber > 1)
            {
                <li class="page-item">
                    <button class="page-link pagination-btn" data-page="@(Model.PageNumber - 1)">Previous</button>
                </li>
            }

            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                    <button class="page-link pagination-btn" data-page="@i">@i</button>
                </li>
            }

            @if (Model.PageNumber < Model.TotalPages)
            {
                <li class="page-item">
                    <button class="page-link pagination-btn" data-page="@(Model.PageNumber + 1)">Next</button>
                </li>
            }
        </ul>
    </nav>
}
else
{
    <div class="alert alert-info mt-3">
        <h3 class="text-center">No Employee Found in this Department</h3>
    </div>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
             $(document).ready(function () {
           $(document).on("click", ".deletebtn", function() {

                var employeeId = $(this).data("id");
                var token = $('input[name="__RequestVerificationToken"]').val();

            if(confirm("Are you sure you want to delete this employee?")) {
                $.ajax({
                    url: '@Url.Action("Delete", "Admin")',
                    type: "POST",
                    data: { id: employeeId, __RequestVerificationToken: token },
                    success: function (response) {
                        if (response.success) {
                            window.location.href = response.redirectUrl;
                        }
                    },
                            error: function (xhr) {
            var response = JSON.parse(xhr.responseText);
            alert(response.message);
        }
                });
            }
            });


            $("#searchbtn").on('click', function () {
            var value = $(".searchvalue").val();
            $.ajax({
                url: '@Url.Action("Index", "Admin")',
                type: "GET",
                data: { searchName: value },
                success: function (result) {
                    $("#employeeTable").html($(result).find("#employeeTable").html());
                    $(".pagination").html($(result).find(".pagination").html());
                },

             error: function (xhr) {
            var response = JSON.parse(xhr.responseText);
            alert(response.message);
        }
            });
        });

                $(document).on("click",".pagination-btn",function () {
            var page = $(this).data("page");
            $.ajax({
                url: '@Url.Action("Index", "Admin")',
                type: "GET",
                data: { pageno: page},
                success: function (result) {
                    $("#employeeTable").html($(result).find("#employeeTable").html());

                    $(".pagination").html($(result).find(".pagination").html());
                },
                        error: function (xhr) {
            var response = JSON.parse(xhr.responseText);
            alert(response.message);
        }
            });
        });

        });

    </script>
}
