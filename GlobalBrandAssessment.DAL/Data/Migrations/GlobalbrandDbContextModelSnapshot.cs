// <auto-generated />
using System;
using GlobalBrandAssessment.GlobalBrandDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GlobalBrandAssessment.DAL.Migrations
{
    [DbContext(typeof(GlobalbrandDbContext))]
    partial class GlobalbrandDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UploadedById")
                        .HasColumnType("int");

                    b.HasKey("AttachmentId");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.HasIndex("UploadedById");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Finance"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Marketing"
                        });
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DeptId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeptId = 1,
                            FirstName = "Ahmed",
                            ImageURL = "/Images/bohemian-man-with-his-arms-crossed.jpg",
                            LastName = "Farag",
                            Salary = 5000m
                        },
                        new
                        {
                            Id = 2,
                            DeptId = 1,
                            FirstName = "Mariam",
                            ImageURL = "/Images/causal-female-posing-hat-isolated-white-wall.jpg",
                            LastName = "Ahmed",
                            Salary = 6000m
                        },
                        new
                        {
                            Id = 3,
                            DeptId = 1,
                            FirstName = "Abdelrahman",
                            ImageURL = "/Images/smiling-young-man-with-crossed-arms-outdoors.jpg",
                            LastName = "Mohammed",
                            Salary = 5500m
                        },
                        new
                        {
                            Id = 4,
                            DeptId = 2,
                            FirstName = "Sara",
                            ImageURL = "/Images/young-beautiful-woman-pink-warm-sweater-natural-look-smiling-portrait-isolated-long-hair.jpg",
                            LastName = "Ali",
                            Salary = 7000m
                        },
                        new
                        {
                            Id = 5,
                            DeptId = 3,
                            FirstName = "Aliaa",
                            ImageURL = "/Images/causal-female-posing-hat-isolated-white-wall.jpg",
                            LastName = "Khaled",
                            Salary = 6500m
                        },
                        new
                        {
                            Id = 6,
                            DeptId = 4,
                            FirstName = "Hamza",
                            ImageURL = "/Images/bohemian-man-with-his-arms-crossed.jpg",
                            LastName = "Ali",
                            Salary = 8500m
                        },
                        new
                        {
                            Id = 7,
                            DeptId = 2,
                            FirstName = "Tarek",
                            ImageURL = "/Images/smiling-young-man-with-crossed-arms-outdoors.jpg",
                            LastName = "Salama",
                            Salary = 9500m
                        },
                        new
                        {
                            Id = 8,
                            DeptId = 3,
                            FirstName = "Ali",
                            ImageURL = "/Images/smiling-young-man-with-crossed-arms-outdoors.jpg",
                            LastName = "Mohammed",
                            Salary = 12000m
                        },
                        new
                        {
                            Id = 9,
                            DeptId = 4,
                            FirstName = "Mai",
                            ImageURL = "/Images/young-woman-posing-outdoor-field.jpg",
                            LastName = "Alaa",
                            Salary = 15000m
                        });
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Compile and analyze IT data.",
                            EmployeeId = 2,
                            Status = "Pending",
                            Title = "Prepare monthly IT report"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Review and update handbook for 2025.",
                            EmployeeId = 3,
                            Status = "InProgress",
                            Title = "IT Policy Update"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Perform maintenance on servers.",
                            EmployeeId = 4,
                            Status = "Completed",
                            Title = "System Maintenance"
                        });
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            EmployeeId = 1,
                            Password = "Ahmed2003#",
                            Role = "Manager",
                            UserName = "AhmedFarag"
                        },
                        new
                        {
                            UserId = 2,
                            EmployeeId = 2,
                            Password = "Mariam123#",
                            Role = "Employee",
                            UserName = "MariamAhmed"
                        },
                        new
                        {
                            UserId = 3,
                            EmployeeId = 3,
                            Password = "Abdelrahman123#",
                            Role = "Employee",
                            UserName = "AbdelrahmanMohammed"
                        },
                        new
                        {
                            UserId = 4,
                            EmployeeId = 4,
                            Password = "Sara123#",
                            Role = "Employee",
                            UserName = "SaraAli"
                        },
                        new
                        {
                            UserId = 5,
                            EmployeeId = 5,
                            Password = "Aliaa123#",
                            Role = "Employee",
                            UserName = "AliaaAli"
                        },
                        new
                        {
                            UserId = 6,
                            EmployeeId = 6,
                            Password = "Hamza123#",
                            Role = "Employee",
                            UserName = "HamzaAli"
                        },
                        new
                        {
                            UserId = 7,
                            EmployeeId = 7,
                            Password = "Tarek2003#",
                            Role = "Manager",
                            UserName = "TarekSalama"
                        },
                        new
                        {
                            UserId = 8,
                            EmployeeId = 8,
                            Password = "Ali2003#",
                            Role = "Manager",
                            UserName = "AliMohammed"
                        },
                        new
                        {
                            UserId = 9,
                            EmployeeId = 9,
                            Password = "Mai2003#",
                            Role = "Manager",
                            UserName = "MaiAlaa"
                        });
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.Attachment", b =>
                {
                    b.HasOne("GlobalBrandAssessment.DAL.Data.Models.Tasks", "Task")
                        .WithOne("Attachments")
                        .HasForeignKey("GlobalBrandAssessment.DAL.Data.Models.Attachment", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalBrandAssessment.DAL.Data.Models.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.Comment", b =>
                {
                    b.HasOne("GlobalBrandAssessment.DAL.Data.Models.Tasks", "Task")
                        .WithOne("Comments")
                        .HasForeignKey("GlobalBrandAssessment.DAL.Data.Models.Comment", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GlobalBrandAssessment.DAL.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.Department", b =>
                {
                    b.HasOne("GlobalBrandAssessment.DAL.Data.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.Employee", b =>
                {
                    b.HasOne("GlobalBrandAssessment.DAL.Data.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DeptId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GlobalBrandAssessment.DAL.Data.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Department");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.Tasks", b =>
                {
                    b.HasOne("GlobalBrandAssessment.DAL.Data.Models.Employee", "AssignedEmployee")
                        .WithMany("Tasks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedEmployee");
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.User", b =>
                {
                    b.HasOne("GlobalBrandAssessment.DAL.Data.Models.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("GlobalBrandAssessment.DAL.Data.Models.User", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.Employee", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GlobalBrandAssessment.DAL.Data.Models.Tasks", b =>
                {
                    b.Navigation("Attachments")
                        .IsRequired();

                    b.Navigation("Comments")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
